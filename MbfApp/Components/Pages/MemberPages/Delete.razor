@page "/members/delete"
@using Microsoft.EntityFrameworkCore
@using MbfApp.Data.Entities
@inject IDbContextFactory<MbfApp.Data.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Member</PageTitle>

<h5>Delete member</h5>
<hr />
<p>Are you sure you want to delete this member?</p>
<div>

    @if (member is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Employee No</dt>
            <dd class="col-sm-10">@member.EmployeeNo</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">
                @($"{member.FirstName} {member.LastName}")
            </dd>
        </dl>
       
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@member.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Phone</dt>
            <dd class="col-sm-10">@member.Phone</dd>
        </dl>
        
        <dl class="row">
            <dt class="col-sm-2">Share</dt>
            <dd class="col-sm-10">@member.Share</dd>
        </dl>
       
        <dl class="row">
            <dt class="col-sm-2">IsActive</dt>
            <dd class="col-sm-10">@member.IsActive</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LeavingDate</dt>
            <dd class="col-sm-10">@member.LeavingDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Location</dt>
            <dd class="col-sm-10">@member.Location!.Name</dd>
        </dl>
        <EditForm method="post" Model="member" OnValidSubmit="DeleteMember" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger btn-sm" disabled="@(member is null)">Delete</button> |
            <a href="/members" class="btn btn-secondary btn-sm"> Back</a>
        </EditForm>
    }
</div>

@code {
    private Member? member;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        member = await context.Members
            .Include(m => m.Location)
            .FirstOrDefaultAsync(m => m.Id == Id);

        if (member is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteMember()
    {
        using var context = DbFactory.CreateDbContext();
        context.Members.Remove(member!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/members");
    }
}
