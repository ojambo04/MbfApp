@page "/members/edit"

@using MbfApp.Dtos.Locations
@using MbfApp.Dtos.Member
@inject NavigationManager NavigationManager
@inject ILocationService LocationService
@inject IMemberService MemberService

@attribute [StreamRendering]

<PageTitle>Edit Member</PageTitle>

@if (Member is null)
{
    <div class="d-flex justify-content-center" style="margin-top: 33vh;">
        <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    return;
}

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card rounded-2 overflow-hidden p-4">
            <h5 class="mb-0">Edit Account</h5>
            <hr class="border-1 border-success opacity-50" />

            @if (ErrorMessage is not null)
            {
                <div class="alert alert-danger" role="alert">@ErrorMessage</div>
            }

            <EditForm method="post" Model="Member" OnValidSubmit="UpdateMember" FormName="edit" Enhance>
                <DataAnnotationsValidator />

                <div class="mb-2">
                    <label for="employeeno" class="form-label">EmployeeNo:</label>
                    <InputText id="employeeno" @bind-Value="Member.EmployeeNo" class="form-control"
                        aria-required="true" />
                    <ValidationMessage For="() => Member.EmployeeNo" class="text-danger" />
                </div>

                <div class="row mb-2">
                    <div class="col-6">
                        <label for="firstname" class="form-label">First Name:</label>
                        <InputText id="firstname" @bind-Value="Member.FirstName" class="form-control"
                            aria-required="true" />
                        <ValidationMessage For="() => Member.FirstName" class="text-danger" />
                    </div>
                    <div class="col-6">
                        <label for="lastname" class="form-label">Last Name:</label>
                        <InputText id="lastname" @bind-Value="Member.LastName" class="form-control"
                            aria-required="true" />
                        <ValidationMessage For="() => Member.LastName" class="text-danger" />
                    </div>
                </div>

                <div class="mb-2">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="Member.Email" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Member.Email" class="text-danger" />
                </div>

                <div class="mb-2">
                    <label for="phone" class="form-label">Phone:</label>
                    <InputText id="phone" @bind-Value="Member.Phone" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Member.Phone" class="text-danger" />
                </div>

                <div class="row mb-2">
                    <div class="col-md-6">
                        <label for="joiningdate" class="form-label">Joining Date:</label>
                        <InputDate id="joiningdate" @bind-Value="Member.JoiningDate" class="form-control"
                            aria-required="true" />
                        <ValidationMessage For="() => Member.JoiningDate" class="text-danger" />
                    </div>
                    <div class="col-md-6">
                        <label for="share" class="form-label">Share:</label>
                        <InputNumber id="share" @bind-Value="Member.Share" class="form-control" aria-required="true" />
                        <ValidationMessage For="() => Member.Share" class="text-danger" />
                    </div>
                </div>

                <div class="mb-2">
                    <label for="nominee" class="form-label">Nominee:</label>
                    <InputText id="nominee" @bind-Value="Member.Nominee" class="form-control" />
                    <ValidationMessage For="() => Member.Nominee" class="text-danger" />
                </div>

                <div class="mb-2">
                    <label for="locationid" class="form-label">Location:</label>
                    <InputSelect id="locationid" @bind-Value="Member.LocationId" class="form-control">
                        <option value="0">-- Select Location --</option>
                        @foreach (var location in Locations)
                        {
                            <option value="@location.Id">@location.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Member.LocationId" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-success btn-sm mb-2">Save</button>
                <a href="/members" class="btn btn-secondary btn-sm mb-2">Back </a>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private MemberRequestDto? Member { get; set; }

    private List<LocationDto> Locations = new();
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        Locations = await LocationService.GetLocationListAync();
        var member = await MemberService.GetMemberByIdAsync(Id);

        if (member is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        Member ??= new MemberRequestDto
        {
            EmployeeNo = member.EmployeeNo,
            FirstName = member.FirstName,
            LastName = member.LastName,
            Email = member.Email,
            Phone = member.Phone,
            JoiningDate = member.JoiningDate,
            Share = member.Share,
            Nominee = member.Nominee,
            LocationId = member.LocationId
        };
    }

    private async Task UpdateMember()
    {
        try
        {
            await MemberService.UpdateMember(Id, Member!);
            NavigationManager.NavigateTo("/members");
        }
        catch (InvalidOperationException ex)
        {
            ErrorMessage = ex.Message;
            Console.WriteLine(ex.Message);
        }
    }
}
