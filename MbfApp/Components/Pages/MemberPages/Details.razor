@page "/members/details"
@using Microsoft.EntityFrameworkCore
@using MbfApp.Data.Entities
@inject IDbContextFactory<MbfApp.Data.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<div>
    <h2>Member</h2>
    <hr />
    @if (member is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">EmployeeNo</dt>
            <dd class="col-sm-10">@member.EmployeeNo</dd>
            <dt class="col-sm-2">FirstName</dt>
            <dd class="col-sm-10">@member.FirstName</dd>
            <dt class="col-sm-2">LastName</dt>
            <dd class="col-sm-10">@member.LastName</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@member.Email</dd>
            <dt class="col-sm-2">Phone</dt>
            <dd class="col-sm-10">@member.Phone</dd>
            <dt class="col-sm-2">JoiningDate</dt>
            <dd class="col-sm-10">@member.JoiningDate.ToString("dd/MM/yyyy")</dd>
            <dt class="col-sm-2">Share</dt>
            <dd class="col-sm-10">@member.Share</dd>
            <dt class="col-sm-2">Nominee</dt>
            <dd class="col-sm-10">@member.Nominee</dd>
            <dt class="col-sm-2">IsActive</dt>
            <dd class="col-sm-10">@member.IsActive</dd>
            <dt class="col-sm-2">LeavingDate</dt>
            <dd class="col-sm-10">@member.LeavingDate?.ToString("dd/MM/yyyy")</dd>
            <dt class="col-sm-2">Location</dt>
            <dd class="col-sm-10">@member.Location?.Name</dd>
        </dl>
        <div>
            <a href="@($"/members/edit?id={member.Id}")">Edit</a> |
            <a href="@($"/members")">Back to List</a>
        </div>
    }
</div>

@code {
    private Member? member;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        member = await context.Members
            .Include(m => m.Location)
            .FirstOrDefaultAsync(m => m.Id == Id);

        if (member is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
