@page "/loans/delete"

@inject IDbContextFactory<MbfApp.Data.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
   
    <hr />
    @if (loan is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ApplicationDate</dt>
            <dd class="col-sm-10">@loan.ApplicationDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AppliedAmt</dt>
            <dd class="col-sm-10">@loan.AppliedAmt</dd>
        </dl>
        
        <dl class="row">
            <dt class="col-sm-2">Remarks</dt>
            <dd class="col-sm-10">@loan.Remarks</dd>
        </dl>
        
        <EditForm method="post" Model="loan" OnValidSubmit="DeleteLoan" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(loan is null)">Delete</button> |
            <a href="/loans">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Loan? loan;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        loan = await context.Loans.FirstOrDefaultAsync(m => m.Id == Id);

        if (loan is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteLoan()
    {
        using var context = DbFactory.CreateDbContext();
        context.Loans.Remove(loan!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/loans");
    }
}
