@page "/accountcodes/delete"

@using MbfApp.Dtos.AccountCodes
@using MbfApp.Services.AccountCodeService
@inject NavigationManager NavigationManager
@inject IAccountCodeService AccountCodeService
@attribute [StreamRendering]

<PageTitle>Delete</PageTitle>

@if (accountCode is null)
{
    <div class="d-flex justify-content-center" style="margin-top: 33vh;">
        <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    return;
}

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card rounded-3 shadow-sm overflow-hidden p-4 border-0">
            <h5 class="text-danger mb-1">Delete Account Code</h5>
            <hr class="border-success opacity-50 my-2" />

            @if (ErrorMessage is not null)
            {
                <div class="alert alert-danger" role="alert">@ErrorMessage</div>
            }

            <p class="text-muted mb-3">Are you sure you want to delete the following account?</p>

            <div class="border rounded-2 bg-light p-3 mb-3">
                <dl class="row mb-2">
                    <dt class="col-sm-4 text-secondary small">Account Name</dt>
                    <dd class="col-sm-8 text-dark small">@accountCode.Name</dd>
                </dl>

                <dl class="row mb-0">
                    <dt class="col-sm-4 text-secondary small">Account Type</dt>
                    <dd class="col-sm-8 text-dark small">@accountCode.AccountType</dd>
                </dl>
            </div>

            <EditForm method="post" Model="accountCode" OnValidSubmit="DeleteAccountCode" FormName="delete" Enhance>
                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-danger btn-sm px-4">Delete</button>
                    <a href="/accountcodes" class="btn btn-outline-secondary btn-sm px-4">Cancel</a>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {
    private AccountCodeResponse? accountCode;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500); // to be removed

        accountCode = await AccountCodeService.GetAccountCodeAsync(Id);

        if (accountCode is null) NavigationManager.NavigateTo("notfound");
    }

    private async Task DeleteAccountCode()
    {
        try 
        {
            await AccountCodeService.DeleteAccountCode(Id);
            NavigationManager.NavigateTo("/accountcodes");
        }
        catch (InvalidOperationException ex)
        {
            ErrorMessage = ex.Message;
            Console.WriteLine(ex.Message);
        }
    }
}
