@page "/accountcodes/edit"
@using MbfApp.Data.Entities
@using MbfApp.Dtos.AccountCodes
@using MbfApp.Services.AccountCodeService
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<MbfApp.Data.AppDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject IAccountCodeService AccountCodeService


<PageTitle>Edit Account Codes</PageTitle>

@if (Request is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <div class="card rounded-2 overflow-hidden p-4">

                <h5>Edit Account Code</h5>
                <hr class="border border-success border-1 opacity-50 py-0" />
            <EditForm method="post" Model="Request" OnValidSubmit="UpdateAccountCode" FormName="edit" Enhance>
                <DataAnnotationsValidator />              
              @*   <input type="hidden" name="Id" value="@Request!.Id" /> *@
                    <div class="mb-3">
                        <label for="description" class="form-label small">Account Code:</label>
                        <InputText id="description" @bind-Value="Request.Name" class="form-control form-control-sm" aria-required="true" />
                        <ValidationMessage For="() => Request.Name" class="text-danger" />
                    </div>
                <div class="mb-3">
                    <label for="type" class="form-label small">Account Type</label>
                    <InputSelect id="type" @bind-Value="Request.AccountType" class="form-select form-select-sm">
                        @foreach (var type in Enum.GetValues<AccountType>())
                        {
                            <option value="@type">@type</option>
                        }
                    </InputSelect>
                </div>
                    <button type="submit" class="btn btn-success btn-sm  mb-2">Save</button>
                <a href="/accountcodes" class="btn btn-secondary btn-sm mb-2">Back </a>
            </EditForm>
            </div>
        </div>
    </div>
}


@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private AccountCodeRequestDto? Request { get; set; }

    protected override async Task OnInitializedAsync()
    {      
        var accountCode = await AccountCodeService.GetAccountCodeAsync(Id);
        if (accountCode is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        Request = new AccountCodeRequestDto
        {
            Name = accountCode!.Name,
            AccountType = accountCode.AccountType
        };
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateAccountCode()
    {
             
        try
        {
            await AccountCodeService.UpdateAccountCode(Id, Request!);
        }
        catch (InvalidOperationException e)
        {
            
                throw;
           
        }

        NavigationManager.NavigateTo("/accountcodes");
    }

   
}
