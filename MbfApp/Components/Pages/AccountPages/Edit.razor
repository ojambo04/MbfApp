@page "/accountcodes/edit"

@using MbfApp.Dtos.AccountCodes
@using MbfApp.Services.AccountCodeService
@inject NavigationManager NavigationManager
@inject IAccountCodeService AccountCodeService
@attribute [StreamRendering]

<PageTitle>Edit Account Codes</PageTitle>

@if (Request is null)
{
    <div class="d-flex justify-content-center" style="margin-top: 33vh;">
        <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    return;
}

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card rounded-2 overflow-hidden p-4">
            <h5 class="mb-0">Edit Account Code</h5>
            <hr class="border-1 border-success opacity-50" />

            @if (ErrorMessage is not null)
            {
                <div class="alert alert-danger" role="alert">@ErrorMessage</div>
            }

            <EditForm method="post" Model="Request" OnValidSubmit="UpdateAccountCode" FormName="edit" Enhance>
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label for="description" class="form-label small">Account Name:</label>
                    <InputText id="description" @bind-Value="Request.Name" class="form-control form-control-sm"
                        aria-required="true" />
                    <ValidationMessage For="() => Request.Name" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="type" class="form-label small">Account Type</label>
                    <InputSelect id="type" @bind-Value="Request.AccountType" class="form-select form-select-sm">
                        @foreach (var type in Enum.GetValues<AccountType>())
                        {
                            <option value="@type">@type</option>
                        }
                    </InputSelect>
                </div>

                <button type="submit" class="btn btn-success btn-sm mb-2">Save</button>
                <a href="/accountcodes" class="btn btn-secondary btn-sm mb-2">Back </a>
            </EditForm>
        </div>
    </div>
</div>


@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private AccountCodeRequestDto? Request { get; set; }

    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500); // to be removed

        var accountCode = await AccountCodeService.GetAccountCodeAsync(Id);

        if (accountCode is null) NavigationManager.NavigateTo("notfound");

        Request ??= new AccountCodeRequestDto
        {
            Name = accountCode!.Name,
            AccountType = accountCode.AccountType
        };
    }

    private async Task UpdateAccountCode()
    {
        try
        {
            await AccountCodeService.UpdateAccountCode(Id, Request!);
            NavigationManager.NavigateTo("/accountcodes");
        }
        catch (InvalidOperationException ex)
        {
            ErrorMessage = ex.Message;
            Console.WriteLine(ex.Message);
        }
    }
}
