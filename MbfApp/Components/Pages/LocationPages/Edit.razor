@page "/locations/edit"
@using MbfApp.Dtos.Locations

@inject ILocationService LocationService
@inject NavigationManager NavigationManager

<PageTitle>Edit Location</PageTitle>

@if (Location is null)
{
    <div class="d-flex justify-content-center" style="margin-top: 33vh;">
        <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    return;
}

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card rounded-2 overflow-hidden p-4">
            <h5 class="mb-0">Edit Location</h5>
            <hr class="border-1 border-success opacity-50" />

            @if (ErrorMessage is not null)
            {
                <div class="alert alert-danger" role="alert">@ErrorMessage</div>
            }

            <EditForm method="post" Model="Location" OnValidSubmit="UpdateLocation" FormName="edit" Enhance>
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label for="name" class="form-label">Location:</label>
                    <InputText id="name" @bind-Value="Location.Name" class="form-control form-control-sm" aria-required="true" />
                    <ValidationMessage For="() => Location.Name" class="text-danger" />
                </div>
                
                <button type="submit" class="btn btn-success btn-sm mb-2">Save</button>
                <a href="/locations" class="btn btn-secondary btn-sm mb-2">Back </a>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private LocationRequestDto? Location { get; set; }

    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        var accountCode = await LocationService.GetLocationByIdAsync(Id);

        if (accountCode is null) NavigationManager.NavigateTo("notfound");

        Location ??= new LocationRequestDto
        {
            Name = accountCode!.Name
        };
    }

    private async Task UpdateLocation()
    {
        try
        {
            await LocationService.UpdateLocation(Id, Location!);
            NavigationManager.NavigateTo("/locations");
        }
        catch (InvalidOperationException ex)
        {
            ErrorMessage = ex.Message;
            Console.WriteLine(ex.Message);
        }
    }
}
